/* 0- General */

int decimalPrecision = 4;                 // decimal places for all values shown in LED Display & Serial Monitor

/* Mereni spotreby tarify */
#define pintarif A5
float spotrebaNT = 0;
float spotrebaVT = 0;

/* 1- Mereni frekvence */

unsigned long startMicros;                /* start counting time for frequency (in micro seconds)*/
unsigned long currentMicros;              /* current counting time for frequency (in micro seconds) */
int expectedFrequency = 50;               // Key in your grid frequency. No issue if key wrong. This is to collect number of samples.
int napetiPin = A2;                       // The signal for frequency sensed. Can be by AC Current sensor or can be by AC Votlage sensor.
float frequencySampleCount = 0;           /* count the number of sample, 1 sample equivalent to 1 cycle */
float frequency = 0 ;                     /* shows the value of frequency*/
float a;                                  /* use for calculation purpose*/
float switch01 = 0;                       /* use for switching function */
float vAnalogRead = 0;                    /* read analog value, can be use for AC current sensor or AC voltage sensor*/

/* 1- Mereci napeti */

float voltageSampleRead  = 0;
float voltageLastSample  = 0;               /* to count time for each sample. Technically 1 milli second 1 sample is taken */
float voltageSampleSum   = 0;               /* accumulation of sample readings */
float voltageSampleCount = 0;               /* to count number of sample. */
float voltageMean ;                         /* to calculate the average value from all samples, in analog values*/
float RMSVoltageMean ;                      /* square roof of voltageMean without offset value, in analog value*/
float FinalRMSVoltage;                      /* final voltage value with offset value*/

/* 3. Mereni proudu */
int merenaHodnota = 0;
int maximum = 0;
unsigned long proudCasovac = millis();

#define pinSenzor A0

float odpor = 988.0;
float napetiSpickove;
float proudSpickovyPresRezistor;
float proudRMSPresRezistor;
float proudRMSmereny;
float odberWatt;

/* Print promenne */
unsigned long printCasovac = millis();

void setup()
{

  /* 0- General */

  Serial.begin(9600);                         /* to display readings in Serial Monitor at 9600 baud rates */


  /* 1- setup frekvence */

  startMicros = micros();                     /* Start counting time for frequency measurement */

  pinMode(pinSenzor, INPUT);
  pinMode(pintarif, INPUT);
}

void loop()
{
  /* 1- Mereni napeti */
  if (micros() >= voltageLastSample + 1000 )                                                                  /* every 0.2 milli second taking 1 reading */
  {
    voltageSampleRead = (analogRead(napetiPin) - 512);                                                        /* read the sample value including offset value*/
    voltageSampleSum = voltageSampleSum + sq(voltageSampleRead) ;                                             /* accumulate total analog values for each sample readings*/
    voltageSampleCount = voltageSampleCount + 1;                                                              /* to move on to the next following count */
    voltageLastSample = micros() ;                                                                            /* to reset the time again so that next cycle can start again*/
  }

  /* 1- frequency measurement */
  currentMicros = micros();                                           /* record current time for frequency calculation*/
  vAnalogRead = analogRead(napetiPin) - 512;                 /* read the analog value from sensor */

  if (vAnalogRead >= 0 && switch01 == 0)                              /* if analog value higher than 0, initiate the code*/
  {
    frequencySampleCount = frequencySampleCount + 1 ;             /* count the sample*/
    switch01 = 1;                                                 /* straight away go to standby mode by switching to other function*/
  }

  if (vAnalogRead < 0 && switch01 == 1)                               /* if analog value lower than 0, initiate the code*/
  {
    switch01 = 0;                                                 /* do nothing but to switch back the function for the previous function to be active again*/
    /* this purpose is to make sure whole wave form is complete and counting quantity of sample with no mistake */
  }

  if (frequencySampleCount == 50)                      /* if couting sample reach at 50 (default) which is eqivalent to 1 second*/
  {
    a = currentMicros - startMicros ;                             /* use for calculation purpose*/
    frequency = 1 / ((a / 1000000) / frequencySampleCount);       /* formula for frequency value*/
    voltageMean = voltageSampleSum / voltageSampleCount;                                                      /* calculate average value of all sample readings taken*/
    RMSVoltageMean = (sqrt(voltageMean)) * 1.5;                                                               // The value X 1.5 means the ratio towards the module amplification.                                                                                                                                      /* square root of the average value*/
    FinalRMSVoltage = RMSVoltageMean;                                                        /* this is the final RMS voltage*/
    if (FinalRMSVoltage <= 5)                                                                               /* to eliminate any possible ghost value*/
    {
      FinalRMSVoltage = 0;
      frequency = 0;
    }
    voltageSampleSum = 0;                                                                                     /* to reset accumulate sample values for the next cycle */
    voltageSampleCount = 0;                                                                                   /* to reset number of sample for the next cycle */
    startMicros = currentMicros;                                  /* reset the counting time for the next cycle */
    frequencySampleCount = 0;                                     /* reset the total sample taken become 0 for next cycle */
  }

  /* 3. Mereni proudu */
  merenaHodnota = analogRead(pinSenzor);
  if (merenaHodnota > maximum) {
    maximum = merenaHodnota;
  }

  if (millis() >= proudCasovac + 1000 )
  {
    napetiSpickove = (maximum * 5.0) / 1024.0; 
    proudCasovac = millis();
    maximum = 0;
  }

  proudSpickovyPresRezistor = (napetiSpickove / odpor) * 1000.0;
  proudRMSPresRezistor = proudSpickovyPresRezistor * 0.707;
  proudRMSmereny = proudRMSPresRezistor * 2000;
  odberWatt = FinalRMSVoltage * (proudRMSmereny / 1000.0);
  /* Odeslani vysledku */
  if (millis() >= printCasovac + 1000 )
  {
    Serial.print(frequency, 0);
    Serial.print(":");
    Serial.print(FinalRMSVoltage, decimalPrecision);
    Serial.print(":");
    Serial.print(proudRMSmereny, decimalPrecision);
    Serial.print(":");
    Serial.print(odberWatt, decimalPrecision);
    Serial.print(":");
    if(((analogRead(pintarif)* 5.0) / 1024.0)>4)
    {
      Serial.print("0");
    }
    else
    {
      Serial.print("1");
    }
    Serial.print(":");
    Serial.println(millis()-printCasovac);
    
    printCasovac = millis();
  }
}
